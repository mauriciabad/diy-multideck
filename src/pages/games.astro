---
import PageLayout from '../layouts/PageLayout.astro'
import PageMeta from '../components/PageMeta.astro'
import { SITE_TITLE } from '../config'
import { getCompatibility } from '../utils/compatibility'
import { getCollection } from 'astro:content'
import type { GameInfo } from '../lib/schemas'

const games = await getCollection('games')

const gameRelevance = ({game, mapping}: GameInfo): number => {
  return mapping.compatibility * 0.75 + (game.rating ?? 5)
}

const sortedGames = games
  .filter((p) => p.data.post.draft !== true)
  .sort(
    (a, b) =>
    gameRelevance(b.data) - gameRelevance(a.data)
  )
  
  // Sort by compatibility > rating
  // .sort(
  //   (a, b) =>
  //   b.data.mapping.compatibility - a.data.mapping.compatibility ||
  //   (b.data.game.rating ?? 0) - (a.data.game.rating ?? 0)
  // )
---

<PageLayout>
  <PageMeta title={`Games | ${SITE_TITLE}`} slot="meta" />
  <section slot="main">
    <h1
      class="font-extrabold text-5xl md:text-6xl tracking-tight pt-4 pb-8 overflow-hidden"
    >
      How to <span class="whitespace-nowrap"
        >play
        <span
          class="bg-gradient-to-br from-[#3c72fb] via-[#f91669] to-[#c10cea] dark:from-primary-main dark:via-primary-main dark:to-primary-main bg-clip-text text-transparent"
          aria-label="any game"
        >
          ___
        </span>
        ?</span
      >
      <span class="block text-2xl mt-2 font-bold tracking-tight"
        >With the DIY Multideck</span
      >
    </h1>
    <div class="relative">
      <input
        class="w-full px-4 py-3 pr-12 rounded-lg outline-none focus-visible:ring-4 ring-blue-400 border bg-white dark:bg-[#0d1115] border-stone-200 dark:border-[#192129] shadow-lg dark:shadow-none"
        type="search"
        name="search"
        id="search"
        placeholder="Search"
        aria-label="Search"
      />
      <i
        class="ti ti-search absolute text-[1.5rem] top-3 right-3 pointer-events-none"
      ></i>
    </div>

    <p class="text-xl font-bold mt-8 mb-4" id="games-count-no-search">
      {sortedGames.length} games in total
    </p>

    <p class="hidden text-xl font-bold mt-8 mb-4" id="games-count-search">
      Showing <span id="games-count-showing">{sortedGames.length}</span> out of <span
        >{sortedGames.length}</span
      > games
    </p>

    <ul class="unset space-y-4">
      {
        sortedGames.map(({ data: { game, mapping, post }, slug }) => (
          <li
            data-searchable={`${game.title}---${
              post.keywords?.join('---') ?? ''
            }`}
            class="text-xl font-bold rounded-lg p-0 border bg-white dark:bg-[#0d1115] border-stone-200 dark:border-[#192129] shadow-lg dark:shadow-none"
          >
            <a
              href={`/games/${slug}`}
              class="unset"
            >
            <article class="p-3 sm:p-4" >
              <h1 class="block leading-4">{game.title}</h1>
              <p class="text-sm sm:text-base font-normal mt-1 mb-2">{game.description}</p>
              
              <div class="flex items-center gap-3 sm:gap-4">
              <img
                class="grow-0 m-0 max-h-[12rem] max-w-[6rem] rounded shadow border border-stone-200 dark:border-[#192129]"
                src={game.image}
              />
              <div class="leading-normal grow">
                <div class="font-normal text-base text-stone-700 dark:text-stone-200 leading-inherit">
                  <div class="grid grid-cols-3 gap-2">
                    <div class="flex flex-wrap sm:flex-nowrap sm:justify-start flex-col sm:flex-row gap-1 leading-3 text-center justify-center sm:text-left items-center">
                      {game.players && (
                        <i class="ti ti-users" />
                        <span><span class="font-[450]">{game.players}</span> <span class="text-sm text-stone-600 dark:text-stone-300">player{game.players === '1' ? '' : 's'}</span></span>
                      )}
                    </div>
                    <div class="flex flex-wrap sm:flex-nowrap sm:justify-start flex-col sm:flex-row gap-1 leading-3 text-center justify-center sm:text-left items-center">
                      {game.time && (
                        <i class="ti ti-clock" />
                      <span><span class="font-[450]">{game.time}</span> <span class="text-sm text-stone-600 dark:text-stone-300">min</span></span>
                      )}
                    </div>
                    <div class="@container flex flex-wrap sm:flex-nowrap sm:justify-start flex-col sm:flex-row gap-1 leading-3 text-center justify-center sm:text-left items-center">
                      {game.complexity && (
                        <i class="ti ti-brain" />
                        <span class="font-[450]">
                          {game.complexity}<span class="text-sm text-stone-400 dark:text-stone-400">/5</span> <span class="hidden @[80px]:inline-block text-sm text-stone-600 dark:text-stone-300">Complexity</span>
                        </span>
                      )}
                    </div>
                    <div class="@container flex flex-wrap sm:flex-nowrap sm:justify-start flex-col sm:flex-row gap-1 leading-3 text-center justify-center sm:text-left items-center">
                        <i class="ti ti-discount-check" />
                        <span class=""><span class="font-[450]">{getCompatibility(mapping.compatibility)}</span> <span class="hidden @[90px]:inline-block text-sm text-stone-600 dark:text-stone-300">compatibility</span></span>
                    </div>
                    <div class="flex flex-wrap sm:flex-nowrap sm:justify-start flex-col sm:flex-row gap-1 leading-3 text-center justify-center sm:text-left items-center">
                      <i class="ti ti-cards" />
                      <span><span class="font-[450]">{mapping.requiredCardsCount}</span> <span class="text-sm text-stone-600 dark:text-stone-300">cards</span></span>
                      </div>
                      <div class="flex flex-wrap sm:flex-nowrap sm:justify-start flex-col sm:flex-row gap-1 leading-3 text-center justify-center sm:text-left items-center">
                        <i class="ti ti-brush" />
                        <span><span class="font-[450]">{mapping.requiredDrawingsCount}</span> <span class="text-sm text-stone-600 dark:text-stone-300">drawing{mapping.requiredDrawingsCount === 1 ? '' : 's'}</span></span>
                      </div>
                    </div>
                  </div>

                  <div class="hidden sm:flex gap-1 flex-wrap text-sm mt-3">
                    {
                      game.mechanics?.map((mechanic) => (
                        <span class="px-2 py-1 leading-3 rounded-md bg-stone-100 dark:bg-stone-900">{mechanic}</span>
                      ))
                    }
                  </div>
                </div>
                </div>
              </article>
            </a>
          </li>
        ))
      }
    </ul>
    <div
      id="no-results"
      class="hidden py-8 text-2xl text-center text-stone-500 dark:text-slate-200 border-2 border-dashed border-stone-200 dark:border-[#192129] rounded-2xl"
    >
      <span>No results</span>
    </div>
  </section>
</PageLayout>

<script>
  const searchInput = document.getElementById(
    'search'
  ) as HTMLInputElement | null
  if (!searchInput) throw new Error("search element doesn't exist")
  const noResultsElement = document.getElementById(
    'no-results'
  ) as HTMLDivElement | null
  if (!noResultsElement) throw new Error("no-results element doesn't exist")
  const gamesCountNoSearchElement = document.getElementById(
    'games-count-no-search'
  ) as HTMLDivElement | null
  if (!gamesCountNoSearchElement)
    throw new Error("games-count-no-search element doesn't exist")
  const gamesCountSearchElement = document.getElementById(
    'games-count-search'
  ) as HTMLDivElement | null
  if (!gamesCountSearchElement)
    throw new Error("games-count-search element doesn't exist")
  const gamesCountShowingElement = document.getElementById(
    'games-count-showing'
  ) as HTMLDivElement | null
  if (!gamesCountShowingElement)
    throw new Error("games-count-showing element doesn't exist")

  searchInput.addEventListener('input', () => {
    const elements = document.querySelectorAll<HTMLElement>('[data-searchable]')
    elements.forEach((element) => {
      const elementTextNormalized =
        element.dataset.searchable
          ?.normalize('NFD')
          .replace(/\p{Diacritic}/gu, '')
          .toLowerCase() ?? ''
      const inputTextNormalized = searchInput.value
        .normalize('NFD')
        .replace(/\p{Diacritic}/gu, '')
        .toLowerCase()
      const isMatch = elementTextNormalized.includes(inputTextNormalized)

      if (isMatch) {
        element.classList.remove('hidden')
      } else {
        element.classList.add('hidden')
      }
    })

    // Update count
    const visibleElements = document.querySelectorAll<HTMLElement>(
      '[data-searchable]:not(.hidden)'
    )
    if (visibleElements.length === elements.length) {
      gamesCountNoSearchElement.classList.remove('hidden')
      gamesCountSearchElement.classList.add('hidden')
    } else {
      gamesCountNoSearchElement.classList.add('hidden')
      gamesCountSearchElement.classList.remove('hidden')
    }
    gamesCountShowingElement.innerText = visibleElements.length.toFixed(0)

    // Update empty block
    if (
      [...elements].every((element) => element.classList.contains('hidden'))
    ) {
      noResultsElement.classList.remove('hidden')
    } else {
      noResultsElement.classList.add('hidden')
    }
  })
</script>
