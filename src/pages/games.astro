---
import { getCollection } from 'astro:content'
import PageMeta from '../components/PageMeta.astro'
import Title from '../components/Title.astro'
import { SITE_TITLE } from '../config'
import PageLayout from '../layouts/PageLayout.astro'
import { cn } from '../lib/cn'
import type { GameInfo } from '../lib/schemas/game'
import { getCompatibility } from '../utils/compatibility'

const games = await getCollection('games')

const gameRelevance = ({ game, mapping }: GameInfo): number => {
  return (
    mapping.compatibility * 0.75 +
    (game.rating ?? 5) +
    game.scoreAdjustment +
    (game.recommended ? 100 : 0)
  )
}

const sortedGames = games
  .filter((p) => p.data.post.draft !== true)
  .sort((a, b) => gameRelevance(b.data) - gameRelevance(a.data))

// Sort by compatibility > rating
// .sort(
//   (a, b) =>
//   b.data.mapping.compatibility - a.data.mapping.compatibility ||
//   (b.data.game.rating ?? 0) - (a.data.game.rating ?? 0)
// )
---

<PageLayout>
  <PageMeta title={`Games | ${SITE_TITLE}`} slot="meta" />
  <Title
    text={['How to play', '___', '?']}
    subtitle="With the DIY Multideck"
    class="sm:mt-10"
  />

  <div class="relative">
    <input
      class="w-full px-4 py-3 pr-12 rounded-lg outline-none focus-visible:ring-4 ring-blue-400 border bg-white dark:bg-[#0d1115] border-stone-200 dark:border-[#192129] shadow-lg dark:shadow-none"
      type="search"
      name="search"
      id="search"
      placeholder="Search a game"
      aria-label="Search a game"
    />
    <i
      class="ti ti-search absolute text-[1.5rem] top-3 right-3 pointer-events-none"
    ></i>
  </div>

  <p class="text-xl font-bold mt-8 sm:mt-16 mb-4" id="games-count-no-search">
    {sortedGames.length} games in total
  </p>

  <p class="hidden text-xl font-bold mt-8 mb-4" id="games-count-search">
    Showing <span id="games-count-showing">{sortedGames.length}</span> out of <span
      >{sortedGames.length}</span
    > games
  </p>

  <ul class="unset space-y-4">
    {
      sortedGames.map(({ data: { game, mapping, post }, slug }) => (
        <li
          data-searchable={`${game.title}---${
            post.keywords?.join('---') ?? ''
          }`}
          class="text-xl font-bold rounded-lg p-0 border bg-white dark:bg-[#0d1115] border-stone-200 dark:border-[#192129] shadow-lg dark:shadow-none"
        >
          <a href={`/games/${slug}`} class="unset">
            <article class="p-3 sm:p-4 relative">
              <h1
                class={cn('block leading-5', {
                  'pr-24': game.recommended,
                })}
                transition:name={`game-title-${slug}`}
              >
                {game.title}
              </h1>
              <p
                class={cn('text-sm sm:text-base font-normal mt-1 mb-2', {
                  'pr-14': game.recommended,
                })}
              >
                {game.description}
              </p>

              <div class="flex items-center gap-3 sm:gap-4">
                <img
                  class="grow-0 m-0 max-h-[12rem] max-w-[6rem] rounded shadow border border-stone-200 dark:border-[#192129]"
                  src={game.image}
                  transition:name={`game-image-${slug}`}
                />
                <div class="leading-normal grow">
                  <div class="font-normal text-base text-stone-700 dark:text-stone-200 leading-inherit">
                    <div class="grid grid-cols-3 gap-2">
                      <div class="flex flex-wrap sm:flex-nowrap sm:justify-start flex-col sm:flex-row gap-1 leading-3 text-center justify-center sm:text-left items-center">
                        {game.players && (
                          <>
                            <i class="ti ti-users" />
                            <span>
                              <span class="font-[450]">{game.players}</span>
                              <span class="text-sm text-stone-600 dark:text-stone-300">
                                player{game.players === '1' ? '' : 's'}
                              </span>
                            </span>
                          </>
                        )}
                      </div>
                      <div class="flex flex-wrap sm:flex-nowrap sm:justify-start flex-col sm:flex-row gap-1 leading-3 text-center justify-center sm:text-left items-center">
                        {game.time && (
                          <>
                            <i class="ti ti-clock" />
                            <span>
                              <span class="font-[450]">{game.time}</span>
                              <span class="text-sm text-stone-600 dark:text-stone-300">
                                min
                              </span>
                            </span>
                          </>
                        )}
                      </div>
                      <div class="@container flex flex-wrap sm:flex-nowrap sm:justify-start flex-col sm:flex-row gap-1 leading-3 text-center justify-center sm:text-left items-center">
                        {game.complexity && (
                          <>
                            <i class="ti ti-brain" />
                            <span class="font-[450]">
                              <span class="inline-flex items-baseline">
                                <span>{game.complexity}</span>
                                <span class="text-sm text-stone-400 dark:text-stone-400">
                                  /5
                                </span>
                              </span>
                              <span class="hidden @[80px]:inline-block text-sm text-stone-600 dark:text-stone-300">
                                Complexity
                              </span>
                            </span>
                          </>
                        )}
                      </div>
                      <div class="@container flex flex-wrap sm:flex-nowrap sm:justify-start flex-col sm:flex-row gap-1 leading-3 text-center justify-center sm:text-left items-center">
                        <i class="ti ti-discount-check" />
                        <span class="">
                          <span class="font-[450]">
                            {getCompatibility(mapping.compatibility)}
                          </span>
                          <span class="hidden @[90px]:inline-block text-sm text-stone-600 dark:text-stone-300">
                            compatibility
                          </span>
                        </span>
                      </div>
                      <div class="flex flex-wrap sm:flex-nowrap sm:justify-start flex-col sm:flex-row gap-1 leading-3 text-center justify-center sm:text-left items-center">
                        <i class="ti ti-cards" />
                        <span>
                          <span class="font-[450]">
                            {mapping.requiredCardsCount}
                          </span>
                          <span class="text-sm text-stone-600 dark:text-stone-300">
                            cards
                          </span>
                        </span>
                      </div>
                      <div class="flex flex-wrap sm:flex-nowrap sm:justify-start flex-col sm:flex-row gap-1 leading-3 text-center justify-center sm:text-left items-center">
                        <i class="ti ti-brush" />
                        <span>
                          <span class="font-[450]">
                            {mapping.requiredDrawingsCount}
                          </span>
                          <span class="text-sm text-stone-600 dark:text-stone-300">
                            {`drawing${
                              mapping.requiredDrawingsCount === 1 ? '' : 's'
                            }`}
                          </span>
                        </span>
                      </div>
                    </div>
                  </div>

                  <div class="hidden sm:flex gap-1 flex-wrap text-sm mt-3">
                    {game.mechanics?.map((mechanic) => (
                      <span class="px-2 py-1 leading-3 rounded-md bg-stone-100 dark:bg-stone-900">
                        {mechanic}
                      </span>
                    ))}
                  </div>
                </div>
              </div>
              {game.recommended && (
                <div class="absolute inset-0 overflow-hidden rounded-lg pr-12 pt-12 pointer-events-none">
                  <p
                    class={cn(
                      'w-60 py-2 ml-auto translate-x-1/2 -translate-y-1/2 leading-none rotate-45',
                      'border-y text-center text-xs',
                      'bg-yellow-200 border-yellow-300 text-yellow-950',
                      'dark:bg-yellow-950 dark:border-yellow-900 dark:text-yellow-50'
                    )}
                  >
                    Recommended
                  </p>
                </div>
              )}
            </article>
          </a>
        </li>
      ))
    }
  </ul>
  <div
    id="no-results"
    class="hidden py-8 text-2xl text-center text-stone-500 dark:text-slate-200 border-2 border-dashed border-stone-200 dark:border-[#192129] rounded-2xl"
  >
    <span>No results</span>
  </div>

  <div class="mt-8 text-center">
    <a
      href="/new-game"
      class={cn(
        'unset inline-flex items-center px-3 py-1.5 text-sm text-stone-600 hover:text-stone-900 dark:text-stone-400 dark:hover:text-stone-200'
      )}
    >
      <i class="ti ti-plus text-lg mr-1.5"></i>
       Create new game mapping
    </a>
  </div>
</PageLayout>

<script>
  document.addEventListener('astro:page-load', () => {
    const searchInput = document.getElementById(
      'search'
    ) as HTMLInputElement | null
    if (!searchInput) throw new Error("search element doesn't exist")
    const noResultsElement = document.getElementById(
      'no-results'
    ) as HTMLDivElement | null
    if (!noResultsElement) throw new Error("no-results element doesn't exist")
    const gamesCountNoSearchElement = document.getElementById(
      'games-count-no-search'
    ) as HTMLDivElement | null
    if (!gamesCountNoSearchElement)
      throw new Error("games-count-no-search element doesn't exist")
    const gamesCountSearchElement = document.getElementById(
      'games-count-search'
    ) as HTMLDivElement | null
    if (!gamesCountSearchElement)
      throw new Error("games-count-search element doesn't exist")
    const gamesCountShowingElement = document.getElementById(
      'games-count-showing'
    ) as HTMLDivElement | null
    if (!gamesCountShowingElement)
      throw new Error("games-count-showing element doesn't exist")

    searchInput.addEventListener('input', () => {
      const elements =
        document.querySelectorAll<HTMLElement>('[data-searchable]')
      elements.forEach((element) => {
        const elementTextNormalized =
          element.dataset.searchable
            ?.normalize('NFD')
            .replace(/\p{Diacritic}/gu, '')
            .toLowerCase() ?? ''
        const inputTextNormalized = searchInput.value
          .normalize('NFD')
          .replace(/\p{Diacritic}/gu, '')
          .toLowerCase()
        const isMatch = elementTextNormalized.includes(inputTextNormalized)

        if (isMatch) {
          element.classList.remove('hidden')
        } else {
          element.classList.add('hidden')
        }
      })

      // Update count
      const visibleElements = document.querySelectorAll<HTMLElement>(
        '[data-searchable]:not(.hidden)'
      )
      if (visibleElements.length === elements.length) {
        gamesCountNoSearchElement.classList.remove('hidden')
        gamesCountSearchElement.classList.add('hidden')
      } else {
        gamesCountNoSearchElement.classList.add('hidden')
        gamesCountSearchElement.classList.remove('hidden')
      }
      gamesCountShowingElement.innerText = visibleElements.length.toFixed(0)

      // Update empty block
      if (
        [...elements].every((element) => element.classList.contains('hidden'))
      ) {
        noResultsElement.classList.remove('hidden')
      } else {
        noResultsElement.classList.add('hidden')
      }
    })
  })
</script>
