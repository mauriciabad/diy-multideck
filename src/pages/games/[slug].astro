---
import { getCollection, getEntry } from 'astro:content'
import GameMappingDetails from '../../components/GameMappingDetails.astro'
import GamePostMeta from '../../components/GamePostMeta.astro'
import Prose from '../../components/Prose.astro'
import { MappingTableVariants } from '../../components/react/MappingTableVariants'
import ContentLayout from '../../layouts/ContentLayout.astro'

export async function getStaticPaths() {
  const posts = await getCollection('games')

  return posts
    .filter((p) => p.data.post.draft !== true)
    .map((p) => {
      return { params: { slug: p.slug } }
    })
}

const { slug } = Astro.params
if (typeof slug !== 'string') {
  throw Error(`slug should be string. Received: ${slug}`)
}

const entry = await getEntry('games', slug)
const { game, post, mapping } = entry.data

const resolvedMappings = await getEntry('gameMappings', slug)

const { Content } = await entry.render()
---

<ContentLayout
  title={['How to play ', game.title]}
  subtitle="with the DIY Multideck"
  date={post.date}
>
  <GamePostMeta
    title={`${game.title} | How to play with the DIY Multideck tutorial`}
    description={`Learn how to play ${game.title} with the DIY Multideck`}
    publishDate={post.date.toISOString()}
    pagePath={`/games/${slug}`}
    ogImageAbsoluteUrl={new URL(post.ogImagePath, Astro.site).toString()}
    slot="meta"
  />
  <GameMappingDetails game={game} mapping={mapping} slug={slug} />
  {
    resolvedMappings && (
      <MappingTableVariants
        client:load
        mapping={resolvedMappings.data}
        classNames={{
          container: 'mt-8',
        }}
      />
    )
  }
  <Prose>
    <Content />
  </Prose>
</ContentLayout>
