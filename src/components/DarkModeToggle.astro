---

---

<label for="mode-toggle" class="flex flex-col items-center">
  <span class="text-xs uppercase font-medium" id="mode-toggle-text">Theme</span>
  <button
    transition:persist
    class="justify-self-end bg-neutral-200 dark:bg-neutral-700 inline-flex h-6 w-11 items-center rounded-full"
    id="mode-toggle"
    role="switch"
    type="button"
    tabindex="0"
    aria-checked="false"
    data-headlessui-state=""
    ><span class="sr-only">Toggle dark mode</span><span
      id="mode-circle"
      class="light inline-block h-4 w-4 rounded-full bg-gradient-to-tr invisible"
      ><span
        class="absolute top-0 right-0 w-[10px] h-[10px] rounded-full bg-gray-700 scale-[0]"
      ></span>
    </span>
  </button>
</label>

<script>
  document.addEventListener('astro:page-load', () => {
    function updateHTMLTheme(mode: 'light' | 'dark') {
      const themeColorMetaTag = document.head.querySelector(
        'meta[name="theme-color"]'
      )

      if (mode === 'dark') {
        document.documentElement.classList.remove('light')
        document.documentElement.classList.add('dark')
        if (themeColorMetaTag) {
          // @ts-ignore
          themeColorMetaTag.content = '#0e141b'
        }
      } else {
        document.documentElement.classList.remove('dark')
        document.documentElement.classList.add('light')
        if (themeColorMetaTag) {
          // @ts-ignore
          themeColorMetaTag.content = '#ffffff'
        }
      }
    }
    function updateStorageTheme(mode: 'light' | 'dark') {
      if (mode === 'dark') {
        sessionStorage.setItem('theme', 'dark')
      } else {
        sessionStorage.setItem('theme', 'light')
      }
    }
    function updateCommentsTheme(mode: 'light' | 'dark') {
      const remark42 = (window as any).REMARK42
      if (!remark42) {
        console.info(
          'window.REMARK42 is not loaded, so theme cannot be applied'
        )
        return
      }
      remark42.changeTheme(mode)
    }

    let currentMode: 'light' | 'dark' =
      document.documentElement.classList.contains('dark') ? 'dark' : 'light'

    const modeToggleText = document.querySelector('#mode-toggle-text')
    if (!modeToggleText) throw new Error('#mode-toggle-text not found')
    const toggle = document.querySelector('#mode-toggle')
    if (!toggle) throw new Error('#mode-toggle not found')
    const iconElem = toggle.querySelector('#mode-circle')
    if (!iconElem) throw new Error('#mode-circle not found')

    // set the toggle mode based on the html classname set in ThemeScript.astro
    if (currentMode === 'dark') {
      iconElem.classList.remove('light')
      iconElem.classList.add('dark')

      updateCommentsTheme('dark')
      modeToggleText.textContent = 'Dark'
    } else {
      modeToggleText.textContent = 'Light'
    }

    // we load the toggle invisible to prevent flash
    // remove visibility class after setting initial dark/light class
    iconElem.classList.remove('invisible')

    // Each time the button is clicked, update the count.
    toggle.addEventListener('click', () => {
      if (currentMode === 'dark') {
        const modeToSwitch = 'light'
        iconElem.classList.remove('dark')
        iconElem.classList.add('light')
        updateHTMLTheme(modeToSwitch)
        updateStorageTheme(modeToSwitch)
        updateCommentsTheme(modeToSwitch)
        modeToggleText.textContent = 'Light'
        currentMode = modeToSwitch
      } else {
        const modeToSwitch = 'dark'
        iconElem.classList.remove('light')
        iconElem.classList.add('dark')
        updateHTMLTheme(modeToSwitch)
        updateStorageTheme(modeToSwitch)
        updateCommentsTheme(modeToSwitch)
        modeToggleText.textContent = 'Dark'
        currentMode = modeToSwitch
      }

      // prevent slide animation on page load for dark mode
      if (!iconElem.classList.contains('duration-300')) {
        iconElem.classList.add('duration-300')
      }
    })
  })
</script>

<style>
  .light {
    transform: translateX(0.25rem);
    background-image: linear-gradient(to top right, #f97316, #f97316);
  }
  .dark {
    transform: translateX(1.5rem);
    background-image: linear-gradient(to top right, #facc15, #facc15);
  }
</style>
